package yu.edu.funproject;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;


public class PrintPage {
    public PrintPage(Brokerage brokerage, JFrame frame) {
        frame.setContentPane(this.panel1);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        frame.setSize(1372, 420);
        printedStocks.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
        printedStocks.append(brokerage.initialOutputForApp());
        sorting.setSelectedIndex(0);
        sortButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                printedStocks.setText("");
                if (sorting.getItemAt(sorting.getSelectedIndex()).equals("Symbol")) {
                    brokerage.sortBySymbol();
                }
                if (sorting.getItemAt(sorting.getSelectedIndex()).equals("Status")) {
                    brokerage.sortByStatus();
                }
                if (sorting.getItemAt(sorting.getSelectedIndex()).equals("Quantity")) {
                    brokerage.sortByQuantity();
                }
                if (sorting.getItemAt(sorting.getSelectedIndex()).equals("Current Price")) {
                    brokerage.sortByCurrentPrice();
                }
                if (sorting.getItemAt(sorting.getSelectedIndex()).equals("Sale Price")) {
                    brokerage.sortBySalePrice();
                }
                if (sorting.getItemAt(sorting.getSelectedIndex()).equals("Purchase Price")) {
                    brokerage.sortByPurchasePrice();
                }
                if (sorting.getItemAt(sorting.getSelectedIndex()).equals("Initial Investment")) {
                    brokerage.sortByTotalInvestment();
                }
                if (sorting.getItemAt(sorting.getSelectedIndex()).equals("Current Value")) {
                    brokerage.sortByCurrentValue();
                }
                if (sorting.getItemAt(sorting.getSelectedIndex()).equals("Sale Value")) {
                    brokerage.sortBySaleValue();
                }
                if (sorting.getItemAt(sorting.getSelectedIndex()).equals("Growth $")) {
                    brokerage.sortByGrowthValue();
                }
                if (sorting.getItemAt(sorting.getSelectedIndex()).equals("Growth %")) {
                    brokerage.sortByGrowthPercentage();
                }
                printedStocks.append(brokerage.sortedOutput());
                //JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Sorted by " + sorting.getItemAt(sorting.getSelectedIndex()) + ".");
            }
        });
        back.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                MenuPage menuPage = new MenuPage(brokerage, frame);
            }
        });
        reverseOrder.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                printedStocks.setText("");
                brokerage.reverseOutput();
                printedStocks.append(brokerage.sortedOutput());
            }
        });
        refreshButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                printedStocks.setText("");
                printedStocks.append(brokerage.initialOutputForApp());
                JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Refreshed the listed stocks");
            }
        });
    }

    private JPanel panel1;
    private JTextArea printedStocks;
    private JComboBox sorting;
    private JButton sortButton;
    private JButton back;
    private JLabel sortBy;
    private JScrollPane scroll;
    private JButton reverseOrder;
    private JButton refreshButton;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 5, new Insets(0, 0, 0, 0), -1, -1));
        sorting = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Symbol");
        defaultComboBoxModel1.addElement("Status");
        defaultComboBoxModel1.addElement("Quantity");
        defaultComboBoxModel1.addElement("Current Price");
        defaultComboBoxModel1.addElement("Purchase Price");
        defaultComboBoxModel1.addElement("Sale Price");
        defaultComboBoxModel1.addElement("Initial Investment");
        defaultComboBoxModel1.addElement("Current Value");
        defaultComboBoxModel1.addElement("Sale Value");
        defaultComboBoxModel1.addElement("Growth $");
        defaultComboBoxModel1.addElement("Growth %");
        sorting.setModel(defaultComboBoxModel1);
        sorting.setToolTipText("Sort by");
        panel1.add(sorting, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        back = new JButton();
        back.setHorizontalAlignment(0);
        back.setText("Back");
        panel1.add(back, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scroll = new JScrollPane();
        scroll.setVerticalScrollBarPolicy(22);
        panel1.add(scroll, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 5, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        printedStocks = new JTextArea();
        printedStocks.setEditable(false);
        printedStocks.setText("");
        scroll.setViewportView(printedStocks);
        sortBy = new JLabel();
        sortBy.setHorizontalAlignment(10);
        sortBy.setHorizontalTextPosition(11);
        sortBy.setText("Sort by: ");
        panel1.add(sortBy, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_SOUTHEAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        refreshButton = new JButton();
        refreshButton.setText("Refresh");
        panel1.add(refreshButton, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sortButton = new JButton();
        sortButton.setText("Sort");
        panel1.add(sortButton, new com.intellij.uiDesigner.core.GridConstraints(3, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        reverseOrder = new JButton();
        reverseOrder.setText("Reverse");
        panel1.add(reverseOrder, new com.intellij.uiDesigner.core.GridConstraints(3, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sortBy.setLabelFor(sorting);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
